{
  "enabled": true,
  "name": "Auto Git Commit",
  "description": "Automatically commits important file changes to git when source code, configuration, or documentation files are modified",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "*.py",
      "*.js",
      "*.ts",
      "*.jsx",
      "*.tsx",
      "*.md",
      "*.json",
      "*.yaml",
      "*.yml",
      "*.toml",
      "*.txt",
      "*.sh",
      "*.bat",
      "*.dockerfile",
      "Dockerfile",
      "*.sql",
      "*.go",
      "*.rs",
      "*.java",
      "*.cpp",
      "*.c",
      "*.h",
      "*.hpp",
      "*.cs",
      "*.php",
      "*.rb",
      "*.swift",
      "*.kt",
      "*.scala",
      "*.clj",
      "*.hs",
      "*.elm",
      "*.vue",
      "*.svelte",
      "*.html",
      "*.css",
      "*.scss",
      "*.sass",
      "*.less",
      "*.xml",
      "*.ini",
      "*.cfg",
      "*.conf",
      "pyproject.toml",
      "package.json",
      "requirements.txt",
      "Cargo.toml",
      "go.mod",
      "pom.xml",
      "build.gradle",
      "Makefile",
      "CMakeLists.txt",
      ".gitignore",
      ".env.example"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Important files have been modified. Please review the changes and automatically commit them to git with an appropriate commit message. Analyze the modified files to determine:\n\n1. What type of changes were made (feature, fix, docs, refactor, etc.)\n2. Which files were affected and their significance\n3. Generate a clear, descriptive commit message following conventional commit format\n4. Stage and commit the changes using git commands\n\nFocus on files that represent meaningful development work like source code, configuration files, documentation, and build scripts. Use conventional commit prefixes like feat:, fix:, docs:, refactor:, chore:, etc."
  }
}